package com.utalk.repository;

import com.utalk.configuration.ApplicationConfiguration;

import javafx.util.Pair;
import org.apache.commons.dbcp2.BasicDataSource;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DatabaseConnection {

    private static BasicDataSource basicDataSource = setUpBasicDataSource();

    private DatabaseConnection() {
    }

    private static BasicDataSource setUpBasicDataSource() {
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(ApplicationConfiguration.class);
        ApplicationConfiguration applicationConfiguration = applicationContext.getBean(ApplicationConfiguration.class);
        return applicationConfiguration.getSpringDataSource();
    }

    public static Connection getConnection() {
        try {
            return basicDataSource.getConnection();
        } catch (SQLException exceptionSQL) {
            System.out.println("Database connection could not be established: " + exceptionSQL.getMessage());
            return null;
        }
    }

    public static void initDatabase(Connection connection) {
        for (Pair<String, String> tableDefinition : tableDefinitions) {
            if (checkIfTableExists(tableDefinition.getKey(), connection)) {
                System.out.println("Table: " + tableDefinition.getKey() + " already created in public schema.");
            } else {
                createTable(connection, tableDefinition.getKey(), tableDefinition.getValue());
            }
        }
    }

    private static boolean checkIfTableExists(String tableName, Connection connection) {
        boolean isCreated = false;
        try (PreparedStatement checkIfTableIsCreated = connection
                .prepareStatement(String.format("SELECT * FROM cat WHERE " +
                        "EXISTS(SELECT * FROM cat WHERE table_name='%s') " +
                        "AND table_name='%s'", tableName.toUpperCase(), tableName.toUpperCase()))) {
            checkIfTableIsCreated.execute();
            try (ResultSet resultSet = checkIfTableIsCreated.getResultSet()) {
                if (resultSet.next()) {
                    String result = resultSet.getString("TABLE_TYPE");
                    isCreated = result.contentEquals("TABLE");
                }
            }
        } catch (SQLException e) {
            System.out.println("Database connection could not be established: " + e.getMessage());
        }
        return isCreated;
    }

    private static void createTable(Connection connection, String tableName, String columns) {
        String sqlStatement = String.format("CREATE TABLE %s" +
                "(%s)", tableName, columns);
        System.out.println(sqlStatement);
        try (PreparedStatement createTable = connection.prepareStatement(sqlStatement)) {
            createTable.executeUpdate();
            System.out.println("Table: " + tableName + " created successfully in public schema.");
        } catch (SQLException e) {
            System.out.println("Table: " + tableName + " could not be created : " + e.getMessage());
        }
    }

    private static List<Pair<String, String>> tableDefinitions;

    static {
        tableDefinitions = new ArrayList<>();
        tableDefinitions.add(new Pair<>("profiles",
                "id NUMBER(6) GENERATED by default on null as IDENTITY," +
                        "name varchar2(50)," +
                        "photo VARCHAR2(50)," +
                        "occupation VARCHAR2(50)," +
                        "birthdate DATE," +
                        "location VARCHAR2(50)," +
                        "CONSTRAINT profiles_pkey PRIMARY KEY(id)"));
        tableDefinitions.add(new Pair<>("posts",
                "id NUMBER(6) GENERATED by default on null as IDENTITY," +
                        "profile_id NUMBER(6)," +
                        "posted_on DATE," +
                        "content VARCHAR2(400)," +
                        "CONSTRAINT posts_pkey PRIMARY KEY (id)," +
                        "CONSTRAINT posts_fkey FOREIGN KEY (profile_id) REFERENCES profiles (id) ON DELETE CASCADE "));
        tableDefinitions.add(new Pair<>("friendship",
                "id NUMBER(6) GENERATED by default on null as IDENTITY," +
                        "user_id1 NUMBER(6)," +
                        "user_id2 NUMBER(6)," +
                        "CONSTRAINT friendship_pkey PRIMARY KEY (id)," +
                        "CONSTRAINT friendship_fkey1 FOREIGN KEY (user_id1) REFERENCES profiles (id) ON DELETE CASCADE," +
                        "CONSTRAINT friendship_fkey2 FOREIGN KEY (user_id2) REFERENCES profiles (id) ON DELETE CASCADE"));

        tableDefinitions.add(new Pair<>("users",
                "username VARCHAR2(50)," +
                        "password VARCHAR2(50)," +
                        "profile_id NUMBER(6)," +
                        "CONSTRAINT users_fkey FOREIGN KEY(profile_id) REFERENCES profiles(id)," +
                        "CONSTRAINT users_pkey PRIMARY KEY(username)," +
                        "CONSTRAINT chk_data CHECK (LENGTH(username)>=4 AND LENGTH(password)>=4)"));

    }
}
